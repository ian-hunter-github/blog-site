==========
Full Path: src/index.tsx

import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App";

const rootElement = document.getElementById("root");

if (!rootElement) {
  console.error("Root element not found in DOM.");
  throw new Error("Root element not found");
}

console.log("Root element found:", rootElement);

const root = ReactDOM.createRoot(rootElement);

console.log("Rendering PostsProvider in index.tsx...");

try {
  root.render(
    <React.StrictMode>
      <App />
    </React.StrictMode>
  );
  console.log("Root rendering complete.");
} catch (error) {
  console.error("Error during rendering:", error);
}
==========
Full Path: src/App.tsx

// App.tsx
import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
import HomePage from "./pages/HomePage";
import BlogPostPage from "./pages/BlogPostPage";
import BlogPostEditorPage from "./pages/BlogPostEditorPage";
import AboutPage from "./pages/AboutPage";
import ContactPage from "./pages/ContactPage";
import Layout from "./components/Layout";
import PostsProvider from "./context/PostsContext";
//import { ThemeProvider } from "@emotion/react";
import { CssBaseline } from "@mui/material";
//import { darkTheme, lightTheme } from "./themes/theme";
import { ThemeProviderWrapper } from "./context/ThemeContext";

//const isDarkMode = false; // Replace with actual theme toggle logic
//const theme = isDarkMode ? darkTheme : lightTheme;

const App = () => {

  return (
    // <ThemeProvider theme={theme}>
      <ThemeProviderWrapper>
        <CssBaseline /> {/* Normalize and apply global Material-UI styles */}
        <PostsProvider>
          <Router>
            <Layout>
              <Routes>
                <Route path="/" element={<HomePage />} />
                <Route path="/post/:id" element={<BlogPostPage />} />
                <Route path="/editor" element={<BlogPostEditorPage />} />
                <Route path="/about" element={<AboutPage />} />
                <Route path="/contact" element={<ContactPage />} />
              </Routes>
            </Layout>
          </Router>
        </PostsProvider>
      </ThemeProviderWrapper>
    // </ThemeProvider>
  );
};

export default App;
==========
Full Path: src/main.tsx

import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.tsx'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>,
)
==========
Full Path: src/types/blog.ts

export interface BlogPost {
    created_at: string ;
    id: string;
    title: string;
    summary: string;
    content: string;
    image: string; // Always required
    author: string;
  }
  ==========
Full Path: src/context/PostsContext.tsx

import React, { createContext, useState, useEffect, useContext, ReactNode } from "react";
import { BlogPost } from "../types/blog";

interface Post {
  id: string;
  title: string;
  summary: string;
  content: string;
  created_at: string;
  author: string;
  image: string;
}

interface PostsContextType {
  posts: Post[] | null;
  setPosts: React.Dispatch<React.SetStateAction<Post[] | null>>;
}

// Create the PostsContext with a default value of undefined
const PostsContext = createContext<PostsContextType | undefined>(undefined);

// Custom hook to use the PostsContext
export const usePosts = () => {
  const context = useContext(PostsContext);
  if (!context) {
    throw new Error("usePosts must be used within a PostsProvider");
  }
  return context;
};

interface PostsProviderProps {
  children: ReactNode;
}

// PostsProvider component
export const PostsProvider: React.FC<PostsProviderProps> = ({ children }) => {
  const [posts, setPosts] = useState<Post[] | null>(null);

  useEffect(() => {
    if (posts === null) {
      fetchPosts();
    }
  }, [posts]);

  const fetchPosts = async () => {
    try {
      const response = await fetch(`${import.meta.env.VITE_BACKEND_URL}/fetchAll`);
      const data = await response.json();
      const processedPosts = data.posts.map((post: BlogPost) => ({
        ...post,
        content: post.content.replace(/\n/g, "\n\n"),
      }));
      setPosts(processedPosts || []);
    } catch (error) {
      console.error("Error fetching posts:", error);
      setPosts([]);
    }
  };
  
  return (
    <PostsContext.Provider value={{ posts, setPosts }}>
      {children}
    </PostsContext.Provider>
  );
};

export default PostsProvider;
==========
Full Path: src/context/ThemeContext.tsx

import React, { createContext, useContext, useState } from "react";
import { ThemeProvider, CssBaseline } from "@mui/material";
import { themes } from "../themes"; // Import your themes

// Define the keys of the themes object
type ThemeName = keyof typeof themes; // "forest" | "coral" | "ocean"
type ThemeMode = "light" | "dark";

// Define the context's type
type ThemeContextType = {
  currentTheme: ThemeName;
  currentMode: ThemeMode;
  setTheme: (theme: ThemeName, mode: ThemeMode) => void;
};

// Default values for the context
const defaultContext: ThemeContextType = {
  currentTheme: "forest",
  currentMode: "light",
  setTheme: () => {},
};

// Create the context
const ThemeContext = createContext<ThemeContextType>(defaultContext);

// Create the provider component
export const ThemeProviderWrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [currentTheme, setCurrentTheme] = useState<ThemeName>("forest");
  const [currentMode, setCurrentMode] = useState<ThemeMode>("light");

  const setTheme = (theme: ThemeName, mode: ThemeMode) => {
    setCurrentTheme(theme);
    setCurrentMode(mode);
    localStorage.setItem("theme", theme);
    localStorage.setItem("mode", mode);
  };

  const selectedTheme = themes[currentTheme][currentMode];

  return (
    <ThemeContext.Provider value={{ currentTheme, currentMode, setTheme }}>
      <ThemeProvider theme={selectedTheme} key={`${currentTheme}-${currentMode}`}>
        <CssBaseline />
        {children}
      </ThemeProvider>
    </ThemeContext.Provider>
  );
};

// Export a custom hook for easier context usage
export const useThemeContext = () => useContext(ThemeContext);
==========
Full Path: src/webpack.d.ts

declare const require: {
    context(
      directory: string,
      useSubdirectories: boolean,
      regExp: RegExp
    ): {
      keys: () => string[];
      (id: string): any;
    };
  };
  ==========
Full Path: src/setup-themes.sh

#!/bin/bash

# Define base directories
BASE_DIR="themes"
THEMES=("forest" "coral" "ocean")
FILES=("light.ts" "dark.ts" "index.ts")

# Create themes directory if it doesn't exist
mkdir -p $BASE_DIR

# Function to create a file with content
create_file_with_content() {
  local file_path=$1
  local content=$2
  if [ ! -f "$file_path" ]; then
    echo "$content" > "$file_path"
    echo "Created: $file_path"
  else
    echo "Skipped: $file_path (already exists)"
  fi
}

# Generate theme files
for theme in "${THEMES[@]}"; do
  THEME_DIR="$BASE_DIR/$theme"
  mkdir -p "$THEME_DIR"

  # Create light.ts
  create_file_with_content "$THEME_DIR/light.ts" "import { createTheme } from \"@mui/material/styles\";

const ${theme}LightTheme = createTheme({
  palette: {
    mode: \"light\",
    primary: { main: \"#FF7F50\", dark: \"#E5673D\", light: \"#FFAD85\" }, // Customize for $theme
    secondary: { main: \"#FFD700\" },
    text: { primary: \"#333333\", secondary: \"#666666\" },
    background: { default: \"#F8F8F8\", paper: \"#FFFFFF\" },
  },
  typography: {
    fontFamily: \"'Roboto', sans-serif\",
  },
});

export default ${theme}LightTheme;
"

  # Create dark.ts
  create_file_with_content "$THEME_DIR/dark.ts" "import { createTheme } from \"@mui/material/styles\";

const ${theme}DarkTheme = createTheme({
  palette: {
    mode: \"dark\",
    primary: { main: \"#E5673D\", dark: \"#B25030\", light: \"#FF7F50\" }, // Customize for $theme
    secondary: { main: \"#FFD700\" },
    text: { primary: \"#FFFFFF\", secondary: \"#B0B0B0\" },
    background: { default: \"#121212\", paper: \"#1E1E1E\" },
  },
  typography: {
    fontFamily: \"'Roboto', sans-serif\",
  },
});

export default ${theme}DarkTheme;
"

  # Create index.ts
  create_file_with_content "$THEME_DIR/index.ts" "import ${theme}LightTheme from \"./light\";
import ${theme}DarkTheme from \"./dark\";

export { ${theme}LightTheme, ${theme}DarkTheme };
"
done

# Create the main themes index file
create_file_with_content "$BASE_DIR/index.ts" "import { forestLightTheme, forestDarkTheme } from \"./forest\";
import { coralLightTheme, coralDarkTheme } from \"./coral\";
import { oceanLightTheme, oceanDarkTheme } from \"./ocean\";

export const themes = {
  forest: {
    light: forestLightTheme,
    dark: forestDarkTheme,
  },
  coral: {
    light: coralLightTheme,
    dark: coralDarkTheme,
  },
  ocean: {
    light: oceanLightTheme,
    dark: oceanDarkTheme,
  },
};
"

echo "Theme setup completed!"
==========
Full Path: src/utils/loadMarkdownPosts.ts

import fm from "front-matter";

export interface BlogPost {
  id: string;
  title: string;
  summary: string;
  content: string;
  image: string;
  date: string;
}

export async function loadMarkdownPosts(): Promise<BlogPost[]> {
  console.log("loadMarkdownPosts is being called"); // Debug start

  try {
    // List of markdown files to fetch
    const files: any[] = []; // Add all markdown filenames here
    console.log("Fetching files:", files); // Debug file list

    // Fetch and process all markdown files
    const posts: BlogPost[] = await Promise.all(
      files.map(async (fileName) => {
        console.log("Fetching:", fileName); // Debug individual file fetch
        const response = await fetch(`/content/${fileName}`);
        if (!response.ok) {
          throw new Error(`Failed to fetch file: ${fileName}`);
        }

        const fileContent = await response.text();
        console.log("Fetched content:", fileContent.slice(0, 100)); // Debug snippet

        const { attributes, body } = fm<{
          title: string;
          summary: string;
          image: string;
          date: string;
        }>(fileContent);

        const post = {
          id: fileName.replace(".md", ""), // Remove the .md extension
          title: attributes.title || "Untitled Post", // Fallback for missing title
          summary: attributes.summary || "No summary available.", // Fallback for missing summary
          content: body,
          image: attributes.image || "/placeholder.png", // Fallback for missing image
          date: attributes.date || new Date().toISOString(), // Fallback for missing date
        };

        console.log("Processed Post:", post); // Debug processed post
        return post;
      })
    );

    console.log("All Posts Processed:", posts); // Debug final posts array
    return posts;
  } catch (error) {
    console.error("Error in loadMarkdownPosts:", error);
    return [];
  }
}
==========
Full Path: src/setup-theme-selector.sh

#!/bin/bash

# Base paths
CONTEXT_DIR="context"
COMPONENTS_DIR="components"
HEADER_DIR="$COMPONENTS_DIR/Header"
BASE_THEME_FILE="themes/index.ts"

# Create directories if they don't exist
mkdir -p $CONTEXT_DIR
mkdir -p $COMPONENTS_DIR
mkdir -p $HEADER_DIR

# Function to create a file with content
create_file_with_content() {
  local file_path=$1
  local content=$2
  if [ ! -f "$file_path" ]; then
    echo "$content" > "$file_path"
    echo "Created: $file_path"
  else
    echo "Skipped: $file_path (already exists)"
  fi
}

# Create ThemeContext.tsx
create_file_with_content "$CONTEXT_DIR/ThemeContext.tsx" "import React, { createContext, useContext, useState, useEffect } from 'react';
import { ThemeProvider, CssBaseline } from '@mui/material';
import { themes } from '../themes';

type ThemeContextType = {
  currentTheme: string;
  currentMode: 'light' | 'dark';
  setTheme: (theme: string, mode: 'light' | 'dark') => void;
};

const ThemeContext = createContext<ThemeContextType>({
  currentTheme: 'forest',
  currentMode: 'light',
  setTheme: () => {},
});

export const ThemeProviderWrapper: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [currentTheme, setCurrentTheme] = useState(() => localStorage.getItem('theme') || 'forest');
  const [currentMode, setCurrentMode] = useState<'light' | 'dark'>(() => (localStorage.getItem('mode') as 'light' | 'dark') || 'light');

  const setTheme = (theme: string, mode: 'light' | 'dark') => {
    setCurrentTheme(theme);
    setCurrentMode(mode);
    localStorage.setItem('theme', theme);
    localStorage.setItem('mode', mode);
  };

  const selectedTheme = themes[currentTheme][currentMode];

  return (
    <ThemeContext.Provider value={{ currentTheme, currentMode, setTheme }}>
      <ThemeProvider theme={selectedTheme}>
        <CssBaseline />
        {children}
      </ThemeProvider>
    </ThemeContext.Provider>
  );
};

export const useThemeContext = () => useContext(ThemeContext);
"

# Create ThemeSelector.tsx
create_file_with_content "$COMPONENTS_DIR/ThemeSelector.tsx" "import React from 'react';
import { Menu, MenuItem, Button } from '@mui/material';
import { useThemeContext } from '../context/ThemeContext';

const ThemeSelector: React.FC = () => {
  const { currentTheme, currentMode, setTheme } = useThemeContext();
  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);

  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {
    setAnchorEl(event.currentTarget);
  };

  const handleClose = () => {
    setAnchorEl(null);
  };

  const themes = ['forest', 'coral', 'ocean'];
  const modes: ('light' | 'dark')[] = ['light', 'dark'];

  return (
    <>
      <Button onClick={handleClick} variant='contained'>
        Current: {currentTheme} ({currentMode})
      </Button>
      <Menu anchorEl={anchorEl} open={Boolean(anchorEl)} onClose={handleClose}>
        {themes.map((theme) =>
          modes.map((mode) => (
            <MenuItem key={\`\${theme}-\${mode}\`} onClick={() => setTheme(theme, mode)}>
              {theme.charAt(0).toUpperCase() + theme.slice(1)} ({mode})
            </MenuItem>
          ))
        )}
      </Menu>
    </>
  );
};

export default ThemeSelector;
"

# Create Header.tsx with ThemeSelector
create_file_with_content "$HEADER_DIR/Header.tsx" "import React from 'react';
import { AppBar, Toolbar, Typography } from '@mui/material';
import ThemeSelector from '../ThemeSelector';

const Header: React.FC = () => {
  return (
    <AppBar position='sticky'>
      <Toolbar>
        <Typography variant='h6' sx={{ flexGrow: 1 }}>
          My Blog
        </Typography>
        <ThemeSelector />
      </Toolbar>
    </AppBar>
  );
};

export default Header;
"

# Add index.tsx instructions
echo "Ensure your index.tsx wraps the application with ThemeProviderWrapper:

import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';
import { ThemeProviderWrapper } from './context/ThemeContext';

ReactDOM.render(
  <React.StrictMode>
    <ThemeProviderWrapper>
      <App />
    </ThemeProviderWrapper>
  </React.StrictMode>,
  document.getElementById('root')
);
"

echo "Theme Selector setup completed!"
==========
Full Path: src/components/Footer/Footer.tsx

import React from "react";
import { Box, Typography } from "@mui/material";
import { useTheme } from "@mui/material/styles";

const Footer: React.FC = () => {
  const theme = useTheme(); // Access the current theme

  console.log("Theme Secondary Main:", theme.palette.secondary.main);
  console.log("Theme Text Secondary:", theme.palette.text.secondary);

  return (
    <Box
      component="footer"
      sx={{
        backgroundColor: `${theme.palette.secondary.main}`, // Dynamic theme color
        color: theme.palette.text.secondary, // Dynamic text color
        textAlign: "center",
        padding: "16px",
      }}
    >
      <Typography variant="body2">
        © {new Date().getFullYear()} My Blog. All rights reserved.
      </Typography>
    </Box>
  );
};

export default Footer;
==========
Full Path: src/components/Footer/Footer.css

.header {
    background-color: #ebd809; /* #003366 Darker blue for better contrast */
    padding: 10px;
    text-align: center;
}

.header a {
    color: var(--accent-color); /* Sea Green */
    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
    text-decoration: none;
    margin: 0 15px;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 1.2rem;
}

.header a:hover {
    color: var(--primary-color); /* Coral */
    background-color: rgba(255, 215, 0, 0.4); /* Gold */
    text-decoration: underline;
}
==========
Full Path: src/components/ThemeSelector.tsx

import React from "react";
import { Menu, MenuItem, Button } from "@mui/material";
import { useThemeContext } from "../context/ThemeContext";

const ThemeSelector: React.FC = () => {
  const { currentTheme, currentMode, setTheme } = useThemeContext();
  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);

  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {
    setAnchorEl(event.currentTarget);
  };

  const handleClose = () => {
    setAnchorEl(null);
  };

  // Explicitly typed arrays
  const themes = ["forest", "coral", "ocean"] as const; // Mark as a tuple
  const modes: ("light" | "dark")[] = ["light", "dark"];

  return (
    <>
      <Button onClick={handleClick} variant="contained">
        Current: {currentTheme} ({currentMode})
      </Button>
      <Menu anchorEl={anchorEl} open={Boolean(anchorEl)} onClose={handleClose}>
        {themes.map((theme) =>
          modes.map((mode) => (
            <MenuItem
              key={`${theme}-${mode}`}
              onClick={() => setTheme(theme as typeof themes[number], mode)}
            >
              {theme.charAt(0).toUpperCase() + theme.slice(1)} ({mode})
            </MenuItem>
          ))
        )}
      </Menu>
    </>
  );
};

export default ThemeSelector;
==========
Full Path: src/components/MarkdownRenderer.tsx

import ReactMarkdown from "react-markdown";
import DOMPurify from "dompurify";

interface MarkdownRendererProps {
  markdown: string;
}

export default function MarkdownRenderer({ markdown }: MarkdownRendererProps) {
  const sanitizedMarkdown = DOMPurify.sanitize(markdown);

  return (
    <div>
      <ReactMarkdown>
        {sanitizedMarkdown}
      </ReactMarkdown>
    </div>
  );
}
==========
Full Path: src/components/BlogCardContent.tsx

import ReactMarkdown from "react-markdown";
import { Box } from "@mui/material";

interface BlogCardContentProps {
  content: string;
}

export default function BlogCardContent({ content }: BlogCardContentProps) {
    return (
      <Box
        sx={{
          "& h1": { fontSize: "1.5rem", fontWeight: "bold", marginBottom: "10px" },
          "& p": { marginBottom: "10px" },
          "& table": { borderCollapse: "collapse", width: "100%" },
          "& th, & td": { border: "1px solid #ccc", padding: "8px", textAlign: "left" },
          "& th": { backgroundColor: "#f4f4f4", fontWeight: "bold" },
           }}
      >
        <ReactMarkdown>{content}</ReactMarkdown>
      </Box>
    );
  }
==========
Full Path: src/components/Layout.tsx

import React from "react";
import Header from "./Header/Header";
import Footer from "./Footer/Footer";

interface LayoutProps {
  children: React.ReactNode;
}

export default function Layout({ children }: LayoutProps) {
  return (
    <div
      style={{
        display: "flex",
        flexDirection: "column",
        minHeight: "100vh", // Full viewport height
      }}
    >
      <Header />
      <main style={{ flex: 1, padding: "16px" }}>
        {children}
      </main>
      <Footer />
    </div>
  );
}

// Add this line to resolve the module issue
export { };==========
Full Path: src/components/BlogCard/BlogCardStyles.ts

const BlogCardStyles = {
    card: {
      display: 'flex',
      flexDirection: 'column',
      justifyContent: 'space-between',
      height: '100%',
      padding: '16px',
      backgroundColor: '#F9F9F9', //'#E3F2FD', // Light Blue background
      borderRadius: '8px',
      boxShadow: '0px 2px 8px rgba(0, 0, 0, 0.1)',
      transition: 'transform 0.2s ease, box-shadow 0.2s ease',
      '&:hover': {
        transform: 'translateY(-4px)',
        boxShadow: '0px 4px 12px rgba(0, 0, 0, 0.2)',
        backgroundColor : "#FFECE5"
      },
    },
    date: {
      fontSize: '0.875rem',
      color: '#555555', // Subtle gray for date text
      marginBottom: '8px',
      fontStyle: 'italic',
    },
    title: {
      fontSize: '1.25rem',
      fontWeight: 'bold',
      color: '#333333', // Darker gray for title
      marginBottom: '8px',
    },
    author: {
      fontSize: '0.875rem',
      color: '#777777', // Subtle gray for author text
      marginBottom: '8px',
    },
    summary: {
      fontSize: '1rem',
      color: '#333333', // Darker gray for summary
    },
  };
  
  export default BlogCardStyles;
  ==========
Full Path: src/components/BlogCard/BlogCard.tsx

import { Link } from "react-router-dom";
import { Card, Box } from "@mui/material";
import { BlogPost } from "../../types/blog";
import BlogCardStyles from "./BlogCardStyles.ts";

interface BlogCardProps {
  post: BlogPost;
}

export default function BlogCard({ post }: BlogCardProps) {
  return (
    <Link
      to={`/post/${post.id}`}
      aria-label={`Read more about ${post.title}`}
      style={{ textDecoration: "none" }}
    >
      <Card sx={BlogCardStyles.card}>
        {/* Date */}
        <Box sx={BlogCardStyles.date}>
          {new Date(post.created_at).toLocaleDateString(undefined, {
            year: "numeric",
            month: "long",
            day: "numeric",
          }) || "Unknown Date"}
        </Box>

        {/* Title */}
        <Box sx={BlogCardStyles.title}>
          {post.title || "Untitled Post"}
        </Box>

        {/* Author */}
        <Box sx={BlogCardStyles.author}>
          {post.author || ""}
        </Box>

        {/* Summary */}
        <Box sx={BlogCardStyles.summary}>
          {post.summary
            ? post.summary.length > 100
              ? `${post.summary.slice(0, 100)}...`
              : post.summary
            : "No summary available."}
        </Box>
      </Card>
    </Link>
  );
}
==========
Full Path: src/components/Header/Header.tsx

import React, { useState } from "react";

import { Link } from "react-router-dom";
import {
  AppBar,
  Toolbar,
  IconButton,
  Box,
  Menu,
  MenuItem,
  Button,
  useMediaQuery,
  useTheme,
} from "@mui/material";
import { Menu as MenuIcon } from "@mui/icons-material";
import ThemeSelector from "../ThemeSelector";

export default function Header() {
  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);

  const theme = useTheme();
  const isMediumOrLarger = useMediaQuery(theme.breakpoints.up("md"));

  const handleMenu = (event: React.MouseEvent<HTMLElement>) => {
    setAnchorEl(event.currentTarget);
  };

  const handleClose = () => {
    setAnchorEl(null);
  };

  return (
    <AppBar
      position="sticky"
      elevation={1}
      sx={{
        backgroundColor: theme.palette.primary.main, // Use primary color for background
        color: theme.palette.primary.contrastText, // Ensure text contrasts with background
      }}
    >
      <Toolbar
        sx={{
          display: "flex",
          justifyContent: "space-between", // Align logo and links
          alignItems: "center",
          padding: theme.spacing(1, 2), // Adjust padding using theme spacing
        }}
      >
        {/* Logo Section */}
        <Link
          to="/"
          style={{
            textDecoration: "none",
            color: "inherit",
            display: "flex",
            alignItems: "center",
          }}
        >
          <img
            src="/logo.png"
            alt="Blog Logo"
            width={150}
            height={40}
            style={{ marginRight: theme.spacing(2) }} // Add space between logo and links
          />
        </Link>

        {/* Links Section */}
        {isMediumOrLarger ? (
          <Box sx={{ display: "flex", gap: 2, padding: "16px", backgroundColor: "inherit" }}>
            <Link to="/about" style={{ textDecoration: "none" }}>
              <Button
                variant="text"
                sx={{
                  color: "text.primary", // Use theme's text primary color
                  "&:hover": {
                    color: "text.secondary", // Use theme's primary color on hover
                  },
                  fontSize: "1.25rem"
                }}
              >
                About
              </Button>
            </Link>
            <Link to="/contact" style={{ textDecoration: "none" }}>
              <Button
                variant="text"
                sx={{
                  color: "text.primary",
                  "&:hover": {
                    color: "text.secondary",
                  },
                  fontSize: "1.25rem"
                }}
              >
                Contact
              </Button>
            </Link>
            <Link to="/editor" style={{ textDecoration: "none" }}>
              <Button
                variant="text"
                sx={{
                  color: "text.primary",
                  "&:hover": {
                    color: "text.secondary",
                  },
                  fontSize: "1.25rem"
                }}
              >
                Editor
              </Button>
            </Link>
            <ThemeSelector/>
          </Box>) : (
          // Menu Icon Section (for smaller screens)
          <>
            <IconButton
              edge="end"
              onClick={handleMenu}
              aria-label="menu"
              sx={{
                color: "inherit",
              }}
            >
              <MenuIcon />
            </IconButton>
            <Menu
              anchorEl={anchorEl}
              open={Boolean(anchorEl)}
              onClose={handleClose}
              sx={{
                "& .MuiPaper-root": {
                  backgroundColor: theme.palette.background.paper, // Use theme background
                  color: theme.palette.text.primary, // Use theme text color
                },
              }}
            >
              <MenuItem onClick={handleClose}>
                <Link to="/about" style={{ textDecoration: "none", color: "inherit" }}>
                  About
                </Link>
              </MenuItem>
              <MenuItem onClick={handleClose}>
                <Link to="/contact" style={{ textDecoration: "none", color: "inherit" }}>
                  Contact
                </Link>
              </MenuItem>
              <MenuItem onClick={handleClose}>
                <Link to="/editor" style={{ textDecoration: "none", color: "inherit" }}>
                  Editor
                </Link>
              </MenuItem>
            </Menu>
          </>
        )}
      </Toolbar>
    </AppBar>
  );
}
==========
Full Path: src/components/Header/Header.css

.header {
    padding: 10px;
    text-align: center;
}

.header a {
    color: var(--accent-color); /* Sea Green */
    text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
    text-decoration: none;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 1.2rem;
}

.header a:hover {
    color: var(--primary-color); /* Coral */
    background-color: rgba(255, 215, 0, 0.4); /* Gold */
    text-decoration: underline;
}

/* Container for the links */
.header-links {
    display: flex;
    gap: 24px; /* Equivalent to theme.spacing(3) */
    align-items: center;
  }
  
  /* Individual links */
  .header-link {
    text-decoration: none;
  }
  
  .header-link .MuiButton-text {
    color: var(--text-color); /* Use theme variable for text color */
    font-size: 1.5rem; /* Larger font size */
    font-weight: 600; /* Slightly bold */
    padding: 8px 16px; /* Add padding */
  }
  
  .header-link .MuiButton-text:hover {
    color: var(--primary-dark); /* Use theme variable for hover color */
  }
  ==========
Full Path: src/components/ErrorBoundary.tsx

import React, { ErrorInfo, ReactNode } from 'react';

interface ErrorBoundaryProps {
  children: ReactNode;
}

interface ErrorBoundaryState {
  hasError: boolean;
  error: Error | null;
}

class ErrorBoundary extends React.Component<ErrorBoundaryProps, ErrorBoundaryState> {
  constructor(props: ErrorBoundaryProps) {
    super(props);
    this.state = { hasError: false, error: null };
  }

  static getDerivedStateFromError(error: Error): ErrorBoundaryState {
    return { hasError: true, error };
  }

  componentDidCatch(error: Error, info: ErrorInfo): void {
    console.error('Error caught by ErrorBoundary:', error, info);
  }

  render() {
    if (this.state.hasError) {
      return (
        <div style={{ padding: '1rem', backgroundColor: '#f8d7da', color: '#842029', border: '1px solid #f5c2c7', borderRadius: '5px' }}>
          <h2>Something went wrong.</h2>
          <p>{this.state.error?.toString()}</p>
        </div>
      );
    }

    return this.props.children;
  }
}

export default ErrorBoundary;
==========
Full Path: src/vite-env.d.ts

/// <reference types="vite/client" />
==========
Full Path: src/theme.ts

import { createTheme } from '@mui/material/styles';

const theme = createTheme({
  palette: {
    primary: {
      main: '#3f51b5', // Indigo
      light: '#757de8',
      dark: '#002984',
    },
    secondary: {
      main: '#f50057', // Pink
      light: '#ff4081',
      dark: '#c51162',
    },
    background: {
      default: '#f5f5f5',
      paper: '#ffffff',
    },
    text: {
      primary: '#333333',
      secondary: '#666666',
    },
  },
  typography: {
    fontFamily: '"Roboto", "Helvetica", "Arial", sans-serif',
    h1: {
      fontSize: '2.5rem',
      fontWeight: 500,
    },
    h2: {
      fontSize: '2rem',
      fontWeight: 500,
    },
    h3: {
      fontSize: '1.75rem',
      fontWeight: 500,
    },
    body1: {
      fontSize: '1rem',
      lineHeight: 1.5,
    },
  },
  components: {
    MuiButton: {
      styleOverrides: {
        root: {
          textTransform: 'none',
          borderRadius: 8,
        },
      },
    },
    MuiCard: {
      styleOverrides: {
        root: {
          borderRadius: 12,
          boxShadow: '0 4px 6px rgba(0,0,0,0.1)',
        },
      },
    },
  },
});

export default theme;

==========
Full Path: src/config.ts

const config = {
    API_ENABLED: false, // Set to false to use local data
    API_URL: "https://example.com/api/posts", // Replace with your real API URL when ready
  };
  
  export default config;
  ==========
Full Path: src/react-app-env.d.ts

/// <reference types="react-scripts" />
==========
Full Path: src/pages/AboutPage.tsx

import { Typography, Box } from '@mui/material';

export default function AboutPage() {
  return (
    <>

      <div className="container mx-auto px-4 py-8">
        <Box className="max-w-3xl mx-auto">
          <Typography variant="h3" gutterBottom>
            About Us
          </Typography>
          <Typography variant="body1" paragraph>
            Welcome to our blog! We are passionate about sharing knowledge and insights about web development,
            technology, and programming best practices.
          </Typography>
          <Typography variant="body1" paragraph>
            Our mission is to create high-quality content that helps developers of all skill levels improve
            their craft and stay up-to-date with the latest trends and technologies in the industry.
          </Typography>
          <Typography variant="body1" paragraph>
            Whether you're a beginner just starting your journey in web development or an experienced
            developer looking to expand your knowledge, we've got something for you.
          </Typography>
          <Typography variant="h5" gutterBottom className="mt-6">
            Our Values
          </Typography>
          <Typography variant="body1" component="ul" className="list-disc pl-6">
            <li>Quality over quantity</li>
            <li>Clear and concise explanations</li>
            <li>Practical, real-world examples</li>
            <li>Community-driven learning</li>
          </Typography>
          <Typography variant="body1" className="mt-4">
            Feel free to explore our blog posts and join our community of developers!
          </Typography>
        </Box>
      </div>
    </>

  );
}

==========
Full Path: src/pages/ContactPage.tsx

import { Box, Typography, Grid } from '@mui/material';
import { GitHub, LinkedIn, Twitter, Mail } from '@mui/icons-material';

export default function ContactPage() {
    return (
        <>
            <div className="container mx-auto px-4 py-8">
                <Grid container spacing={6} className="items-center">
                    <Grid item xs={12} md={4}>
                        <Box className="text-center">
                            <img
                                src="/placeholder.svg?height=300&width=300"
                                alt="Ian Hunter"
                                className="rounded-full mx-auto w-64 h-64"
                            />
                        </Box>
                    </Grid>
                    <Grid item xs={12} md={8}>
                        <Typography variant="h3" gutterBottom>
                            Ian Hunter
                        </Typography>
                        <Typography variant="body1" paragraph>
                            Feel free to get in touch with me through any of the following channels:
                        </Typography>
                        <Box className="space-y-4">
                            <Box className="flex items-center gap-2">
                                <Mail className="h-5 w-5" />
                                <Typography>
                                    <a href="mailto:ian.hunter@example.com" className="text-primary hover:underline">
                                        ian.hunter@example.com
                                    </a>
                                </Typography>
                            </Box>
                            <Box className="flex gap-4">
                                <a
                                    href="https://twitter.com/ianhunter"
                                    target="_blank"
                                    rel="noopener noreferrer"
                                    className="text-gray-600 hover:text-primary"
                                >
                                    <Twitter className="h-6 w-6" />
                                </a>
                                <a
                                    href="https://linkedin.com/in/ianhunter"
                                    target="_blank"
                                    rel="noopener noreferrer"
                                    className="text-gray-600 hover:text-primary"
                                >
                                    <LinkedIn className="h-6 w-6" />
                                </a>
                                <a
                                    href="https://github.com/ianhunter"
                                    target="_blank"
                                    rel="noopener noreferrer"
                                    className="text-gray-600 hover:text-primary"
                                >
                                    <GitHub className="h-6 w-6" />
                                </a>
                            </Box>
                        </Box>
                    </Grid>
                </Grid>
            </div>
        </>
    );
}

==========
Full Path: src/pages/BlogPostPage.tsx

import { useParams } from "react-router-dom";
import { usePosts } from "../context/PostsContext";
import ReactMarkdown from "react-markdown";
import remarkGfm from "remark-gfm";
import rehypeRaw from "rehype-raw";

const renderHTML = (text: string) => {
  const processedText = text.replace(/\\n/g, "\n"); // Ensure escaped newlines are converted
  return (
    <ReactMarkdown
      children={processedText}
      remarkPlugins={[remarkGfm]} // GitHub Flavored Markdown (tables, etc.)
      rehypePlugins={[rehypeRaw]} // Allow raw HTML rendering
    />
  );
};

const BlogPostPage = () => {
  const { id } = useParams<{ id: string }>(); // Retrieve post ID from route
  const { posts } = usePosts(); // Access posts from context

  // Ensure posts are valid and find the specific post by ID
  const post = Array.isArray(posts) ? posts.find((post) => post.id == id) : null;

  if (!post) {
    return (
      <>
        <h1>Post Not Found</h1>
        <p>The post you are looking for does not exist or has been removed.</p>
      </>
    );
  }

  return (
    <>
      <h1>{post.title}</h1>
      <p>{post.summary}</p>
      <div>{renderHTML(post.content)}</div>
    </>
  );
};

export default BlogPostPage;
==========
Full Path: src/pages/BlogPostEditorPage.tsx

// BlogPostEditorPage.tsx
import { useState } from "react";
import ReactMarkdownEditorLite from "react-markdown-editor-lite";
import ReactMarkdown from "react-markdown";
import "react-markdown-editor-lite/lib/index.css";
//import "../index.css";
import Grid from "@mui/material/Grid";
import Container from "@mui/material/Container";
import TextField from "@mui/material/TextField";
import Button from "@mui/material/Button";
import Dialog from "@mui/material/Dialog";
import DialogTitle from "@mui/material/DialogTitle";
import DialogContent from "@mui/material/DialogContent";
import DialogActions from "@mui/material/DialogActions";
import List from "@mui/material/List";
import ListItem from "@mui/material/ListItem";
import ListItemButton from "@mui/material/ListItemButton";
import ListItemText from "@mui/material/ListItemText";
import CircularProgress from "@mui/material/CircularProgress";
import SearchIcon from "@mui/icons-material/Search";
import { BlogPost } from "../types/blog";

const BACKEND_URL = import.meta.env.VITE_BACKEND_URL;

const renderHTML = (text: string) => {
  const processedText = text.replace(/\\n/g, "\n");
  return <ReactMarkdown>{processedText}</ReactMarkdown>;
};

let copyCounter = 1;

const BlogPostEditorPage = () => {
  const [selectedPost, setSelectedPost] = useState<BlogPost>( {
    created_at: "",
    author: "",
    id: "",
    title: "",
    summary: "",
    content: "",
    image: "" // Always required
  });
  const [originalData, setOriginalData] = useState({
    title: "",
    summary: "",
    content: "",
    createdAt: "",
  });
  const [formData, setFormData] = useState({
    title: "",
    summary: "",
    content: "",
    createdAt: new Date().toISOString(),
  });
  const [searchQuery, setSearchQuery] = useState("");
  const [showSearchDialog, setShowSearchDialog] = useState(false);
  const [searchResults, setSearchResults] = useState<BlogPost[]>([]);
  const [loading, setLoading] = useState(false); // Spinner state
  const [dialog, setDialog] = useState({
    open: false,
    title: "",
    message: "",
    type: "info", // "info" for success/info, "confirm" for confirmation
    onYes: () => setDialog({ ...dialog, open: false }),
    onNo: () => setDialog({ ...dialog, open: false }),
  });

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
  };

  const handleMarkdownChange = (field: string, value: string) => {
    setFormData({ ...formData, [field]: value });
  };

  const fetchSearchResults = async () => {
    setLoading(true);
    try {
      const response = await fetch(`${BACKEND_URL}/fullTextSearch`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ query: searchQuery }),
      });
      const data = await response.json();
      setSearchResults(data.posts || []);
      setShowSearchDialog(true); // Ensure dialog opens
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    } catch (error) {
      setDialog({
        open: true,
        title: "Error",
        message: "Error fetching search results.",
        type: "info",
        onYes: () => setDialog({ ...dialog, open: false }),
        onNo: () => {}, // Ensure onNo is always defined
      });
    } finally {
      setLoading(false);
    }
  };

  const handleSelectPost = (post: BlogPost) => {
    setSelectedPost(post);
    setOriginalData({
      title: post.title,
      summary: post.summary.replace(/\\n/g, "\n"),
      content: post.content.replace(/\\n/g, "\n"),
      createdAt: post.created_at || new Date().toISOString(),
    });
    setFormData({
      title: post.title,
      summary: post.summary.replace(/\\n/g, "\n"),
      content: post.content.replace(/\\n/g, "\n"),
      createdAt: post.created_at || new Date().toISOString(),
    });
    setShowSearchDialog(false);
  };

  const handleCreate = async () => {
    const newTitle = `${formData.title} (${copyCounter++})`;
    setLoading(true);
    try {
      await fetch(`${BACKEND_URL}/createPost`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ ...formData, title: newTitle }),
      });

      setDialog({
        open: true,
        title: "Success",
        message: `Post "${newTitle}" created successfully.`,
        type: "info",
        onYes: () => setDialog({ ...dialog, open: false }),
        onNo: () => {}, // Ensure onNo is always defined
      });
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    } catch (error) {
      setDialog({
        open: true,
        title: "Error",
        message: "Error creating post.",
        type: "info",
        onYes: () => setDialog({ ...dialog, open: false }),
        onNo: () => {}, // Ensure onNo is always defined
      });
    } finally {
      setLoading(false);
    }
  };

  const handleUpdate = async () => {
    if (!selectedPost) return;
    setLoading(true);
    try {
      await fetch(`${BACKEND_URL}/updatePost`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({
          id: selectedPost.id,
          title: formData.title,
          summary: formData.summary.replace(/\n/g, "\\n"),
          content: formData.content.replace(/\n/g, "\\n"),
          createdAt: formData.createdAt,
        }),
      });
      setDialog({
        open: true,
        title: "Success",
        message: `Post "${formData.title}" updated successfully.`,
        type: "info",
        onYes: () => setDialog({ ...dialog, open: false }),
        onNo: () => {}, // Ensure onNo is always defined
      });
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    } catch (error) {
      setDialog({
        open: true,
        title: "Error",
        message: "Error updating post.",
        type: "info",
        onYes: () => setDialog({ ...dialog, open: false }),
        onNo: () => {}, // Ensure onNo is always defined
      });
    } finally {
      setLoading(false);
    }
  };

  const handleDelete = () => {
    if (!selectedPost) return;
    setDialog({
      open: true,
      title: "Confirm Deletion",
      message: `Are you sure you want to delete the post "${formData.title}"?`,
      type: "confirm",
      onYes: () => {
        executeDelete();
        setDialog({ ...dialog, open: false });
      },
      onNo: () => setDialog({ ...dialog, open: false }), // Explicitly set onNo
    });
  };

  const executeDelete = async () => {
    setLoading(true);
    try {
      await fetch(`${BACKEND_URL}/deletePost`, {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ id: selectedPost.id }),
      });
      setDialog({
        open: true,
        title: "Success",
        message: `Post "${formData.title}" deleted successfully.`,
        type: "info",
        onYes: () => setDialog({ ...dialog, open: false }),
        onNo: () => {}, // Ensure onNo is always defined
      });
      //setSelectedPost();
      setFormData({
        title: "",
        summary: "",
        content: "",
        createdAt: new Date().toISOString(),
      });
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    } catch (error) {
      setDialog({
        open: true,
        title: "Error",
        message: "Error deleting post.",
        type: "info",
        onYes: () => setDialog({ ...dialog, open: false }),
        onNo: () => {}, // Ensure onNo is always defined
      });
    } finally {
      setLoading(false);
    }
  };

  const isCreateDisabled = !formData.summary.trim() && !formData.content.trim();
  const isUpdateEnabled =
    selectedPost &&
    (formData.title !== originalData.title ||
      formData.summary !== originalData.summary ||
      formData.content !== originalData.content ||
      formData.createdAt !== originalData.createdAt);

  return (
    <>
      <Container style={{ minHeight: "calc(100vh - 150px)" }}>
        <h1>Blog Post Editor</h1>

        {loading && <CircularProgress />}

        {/* Search Section */}
        <Grid container spacing={2} alignItems="center" marginBottom={3}>
          <Grid item>
            <Button
              variant="contained"
              color="primary"
              onClick={fetchSearchResults}
              disabled={loading}
              style={{ minWidth: "48px", height: "100%" }}
            >
              <SearchIcon />
            </Button>
          </Grid>
          <Grid item xs>
            <TextField
              fullWidth
              label="Search Posts"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
            />
          </Grid>
        </Grid>

        {/* Dialogs */}
        <Dialog open={dialog.open} onClose={dialog.type === "info" ? dialog.onYes : dialog.onNo}>
          <DialogTitle>{dialog.title}</DialogTitle>
          <DialogContent>
            <p>{dialog.message}</p>
          </DialogContent>
          <DialogActions>
            {dialog.type === "confirm" && (
              <>
                <Button onClick={dialog.onNo} color="error">
                  No
                </Button>
                <Button onClick={dialog.onYes} color="primary">
                  Yes
                </Button>
              </>
            )}
            {dialog.type === "info" && (
              <Button onClick={dialog.onYes} color="primary">
                Close
              </Button>
            )}
          </DialogActions>
        </Dialog>

        {/* Search Results Dialog */}
        <Dialog open={showSearchDialog} onClose={() => setShowSearchDialog(false)}>
          <DialogTitle>Search Results</DialogTitle>
          <DialogContent>
            <List>
              {searchResults.map((post) => (
                <ListItem key={post.id} disablePadding>
                  <ListItemButton onClick={() => handleSelectPost(post)}>
                    <ListItemText primary={`[ID: ${post.id}] ${post.title}`} />
                  </ListItemButton>
                </ListItem>
              ))}
            </List>
          </DialogContent>
          <DialogActions>
            <Button onClick={() => setShowSearchDialog(false)} color="primary">
              Close
            </Button>
          </DialogActions>
        </Dialog>

        {/* Form Fields */}
        <Grid container spacing={2} alignItems="center" marginBottom={3}>
          <Grid item xs={8}>
            <TextField
              fullWidth
              label="Title"
              name="title"
              value={formData.title}
              onChange={handleInputChange}
            />
          </Grid>
          <Grid item xs={4}>
            <TextField
              fullWidth
              label="ID"
              value={selectedPost ? selectedPost.id : ""}
              InputProps={{ readOnly: true }}
            />
          </Grid>
        </Grid>

        <Grid container spacing={2}>
          <Grid item xs={12}>
            <label>Summary:</label>
            <ReactMarkdownEditorLite
              value={formData.summary}
              renderHTML={renderHTML}
              onChange={({ text }) => handleMarkdownChange("summary", text)}
              config={{
                view: {
                  menu: true,
                  md: true,
                  html: true,
                },
              }}
            />
          </Grid>
          <Grid item xs={12}>
            <label>Content:</label>
            <ReactMarkdownEditorLite
              value={formData.content}
              renderHTML={renderHTML}
              onChange={({ text }) => handleMarkdownChange("content", text)}
              style={{ minHeight: "300px" }}
              config={{
                view: {
                  menu: true,
                  md: true,
                  html: true,
                },
              }}
            />
          </Grid>
        </Grid>

        <Grid container spacing={2}>
          <Grid item xs={12} md={4}>
            <Button
              fullWidth
              variant="contained"
              color="success"
              onClick={handleCreate}
              disabled={isCreateDisabled || loading}
            >
              {selectedPost ? "Copy" : "Create"}
            </Button>
          </Grid>
          <Grid item xs={12} md={4}>
            <Button
              fullWidth
              variant="contained"
              color="primary"
              onClick={handleUpdate}
              disabled={!isUpdateEnabled || loading}
            >
              Update
            </Button>
          </Grid>
          <Grid item xs={12} md={4}>
            <Button
              fullWidth
              variant="contained"
              color="error"
              onClick={handleDelete}
              disabled={!selectedPost || loading}
            >
              Delete
            </Button>
          </Grid>
        </Grid>
      </Container>
    </>
  );
};

export default BlogPostEditorPage;
==========
Full Path: src/pages/HomePage.tsx

import { Grid, Typography } from "@mui/material";
import { usePosts } from "../context/PostsContext";
import BlogCard from "../components/BlogCard/BlogCard";

const HomePageContent = () => {
  const { posts } = usePosts();

  // Handle undefined or null posts
  if (!posts) {
    console.log("Posts are loading...");
    return (
      <>
        <Typography variant="h4" gutterBottom>
          Blog Posts
        </Typography>
        <Typography variant="body1">Loading...</Typography>
      </>
    );
  }

  return (
    <>
      <Typography variant="h4" gutterBottom>
        Blog Posts
      </Typography>
      <Grid container spacing={3}>
        {posts.length > 0 ? (
          posts.map((post) => (
            <Grid item xs={12} sm={6} md={4} key={post.id}>
              {/* Use updated BlogCard component */}
              <BlogCard post={post} />
            </Grid>
          ))
        ) : (
          <Typography variant="body1">No posts available</Typography>
        )}
      </Grid>
    </>
  );
};

export default HomePageContent;
==========
Full Path: src/themes/coral/dark.ts

import { createTheme } from "@mui/material/styles";

const coralDarkTheme = createTheme({
  palette: {
    mode: "dark",
    primary: { main: "#003366", dark: "#B25030", light: "#FF7F50" },
    secondary: { main: "#003366" },
    text: { primary: "#FFFFFF", secondary: "#B0B0B0" },
    background: { default: "#003366", paper: "#1E1E1E" },
  },
  typography: {
    fontFamily: "'Roboto', sans-serif",
  },
});

export default coralDarkTheme;

==========
Full Path: src/themes/coral/light.ts

import { createTheme } from "@mui/material/styles";

const coralLightTheme = createTheme({
  palette: {
    mode: "light",
    primary: { main: "#003366", dark: "#E5673D", light: "#FFAD85" },
    secondary: { main: "#003366" },
    text: { primary: "#333333", secondary: "#666666" },
    background: { default: "#003366", paper: "#FFFFFF" },
  },
  typography: {
    fontFamily: "'Roboto', sans-serif",
  },
});

export default coralLightTheme;

==========
Full Path: src/themes/coral/index.ts

import coralLightTheme from "./light";
import coralDarkTheme from "./dark";

export { coralLightTheme, coralDarkTheme };

==========
Full Path: src/themes/forest/dark.ts

import { createTheme } from "@mui/material/styles";

const forestDarkTheme = createTheme({
  palette: {
    mode: "dark",
    primary: { main: "#003366", dark: "#B25030", light: "#FF7F50" },
    secondary: { main: "#003366" },
    text: { primary: "#FFFFFF", secondary: "#B0B0B0" },
    background: { default: "#003366", paper: "#1E1E1E" },
  },
  typography: {
    fontFamily: "'Roboto', sans-serif",
  },
});

export default forestDarkTheme;

==========
Full Path: src/themes/forest/forestLightTheme.ts

import { createTheme } from "@mui/material/styles";

const forestLightTheme = createTheme({
  palette: {
    mode: "light",
    primary: { main: "#4CAF50", dark: "#388E3C", light: "#C8E6C9" }, // Green hues
    secondary: { main: "#8BC34A" },
    text: { primary: "#2E7D32", secondary: "#558B2F" },
    background: { default: "#F1F8E9", paper: "#FFFFFF" },
  },
  typography: {
    fontFamily: "'Roboto', sans-serif",
  },
});

export default forestLightTheme;
==========
Full Path: src/themes/forest/light.ts

import { createTheme } from "@mui/material/styles";

const forestLightTheme = createTheme({
  palette: {
    mode: "light",
    primary: { main: "#003366", dark: "#E5673D", light: "#FFAD85" },
    secondary: { main: "#003366" },
    text: { primary: "#333333", secondary: "#666666" },
    background: { default: "#003366", paper: "#FFFFFF" },
  },
  typography: {
    fontFamily: "'Roboto', sans-serif",
  },
});

export default forestLightTheme;

==========
Full Path: src/themes/forest/index.ts

import forestLightTheme from "./light";
import forestDarkTheme from "./dark";

export { forestLightTheme, forestDarkTheme };

==========
Full Path: src/themes/ocean/dark.ts

import { createTheme } from "@mui/material/styles";

const oceanDarkTheme = createTheme({
  palette: {
    mode: "dark",
    primary: { main: "#003366", dark: "#B25030", light: "#FF7F50" },
    secondary: { main: "#003366" },
    text: { primary: "#FFFFFF", secondary: "#B0B0B0" },
    background: { default: "#003366", paper: "#1E1E1E" },
  },
  typography: {
    fontFamily: "'Roboto', sans-serif",
  },
});

export default oceanDarkTheme;

==========
Full Path: src/themes/ocean/light.ts

import { createTheme } from "@mui/material/styles";

const oceanLightTheme = createTheme({
  palette: {
    mode: "light",
    primary: { main: "#003366", dark: "#E5673D", light: "#FFAD85" },
    secondary: { main: "#003366" },
    text: { primary: "#333333", secondary: "#666666" },
    background: { default: "#003366", paper: "#FFFFFF" },
  },
  typography: {
    fontFamily: "'Roboto', sans-serif",
  },
});

export default oceanLightTheme;

==========
Full Path: src/themes/ocean/index.ts

import oceanLightTheme from "./light";
import oceanDarkTheme from "./dark";

export { oceanLightTheme, oceanDarkTheme };

==========
Full Path: src/themes/index.ts

import { forestLightTheme, forestDarkTheme } from "./forest";
import { coralLightTheme, coralDarkTheme } from "./coral";
import { oceanLightTheme, oceanDarkTheme } from "./ocean";

export const themes = {
  forest: {
    light: forestLightTheme,
    dark: forestDarkTheme,
  },
  coral: {
    light: coralLightTheme,
    dark: coralDarkTheme,
  },
  ocean: {
    light: oceanLightTheme,
    dark: oceanDarkTheme,
  },
};

==========
Full Path: src/themes/theme.ts

import { createTheme, PaletteColor, PaletteMode, PaletteOptions } from "@mui/material/styles";
import { TypographyOptions } from "@mui/material/styles/createTypography";

// **Typography Configuration**
const typography: TypographyOptions = {
  fontFamily: "'Roboto', sans-serif",
  h1: {
    fontFamily: "'Lato', sans-serif",
    fontWeight: 700,
    fontSize: "2.5rem",
  },
  h2: {
    fontFamily: "'Lato', sans-serif",
    fontWeight: 600,
    fontSize: "2rem",
  },
  button: {
    fontWeight: 600,
    textTransform: "none",
    fontSize: "1rem",
  },
};

const palette: { light: PaletteOptions; dark: PaletteOptions } = {
    light: {
      mode: "light" as PaletteMode,
      primary: {
        main: "#FF7F50",
        dark: "#E5673D",
        light: "#FFAD85",
      },
      secondary: {
        main: "#FFD700",
      },
      text: {
        primary: "#333333", // Dark Gray
        secondary: "#666666", // Subtle Gray
      },
      background: {
        default: "#F8F8F8",
        paper: "#FFFFFF",
      },
    },
    dark: {
      mode: "dark" as PaletteMode,
      primary: {
        main: "#E5673D",
        dark: "#B25030",
        light: "#FF7F50",
      },
      secondary: {
        main: "#FFD700",
      },
      text: {
        primary: "#FFFFFF", // White
        secondary: "#B0B0B0", // Light Gray
      },
      background: {
        default: "#121212",
        paper: "#1E1E1E",
      },
    },
  };
  
// **Components Overrides**
const components = (palette: PaletteOptions) => ({
    MuiCssBaseline: {
      styleOverrides: {
        ":root": {
          "--primary-color": (palette.primary as PaletteColor)?.main,
          "--primary-dark": (palette.primary as PaletteColor)?.dark,
          "--secondary-color": (palette.secondary as PaletteColor)?.main,
          "--text-color": palette.text?.primary || "#333333",
          "--background-color": palette.background?.default,
        },
      },
    },
    MuiButton: {
      styleOverrides: {
        root: {
          color: (palette.text as PaletteColor)?.main, // Use text color for buttons
          "&:hover": {
            color: (palette.secondary as PaletteColor)?.main, // Use primary color on hover
          },
          fontSize: "1.25rem",
          padding: "8px 16px",
        },
      },
    },
    MuiLink: {
      styleOverrides: {
        root: {
          color: (palette.primary as PaletteColor)?.main, // Default link color
          "&:hover": {
            color: (palette.secondary as PaletteColor)?.dark, // Hover link color
          },
          textDecoration: "none",
        },
      },
    },
    MuiAppBar: {
      styleOverrides: {
        root: {
          backgroundColor: (palette.primary as PaletteColor)?.main, // AppBar background color
          color: palette.text?.primary, // Text color in the AppBar
        },
      },
    },
  });
  
  // **Light and Dark Themes**
  const lightTheme = createTheme({
    palette: palette.light,
    typography,
    components: components(palette.light), // Call the components function here
  });
  

  const darkTheme = createTheme({
    palette: palette.light,
    typography,
    components: components(palette.dark), // Call the components function here
  });
  

// **Export Themes and Configuration**
export { lightTheme, darkTheme, palette, typography };
==========
